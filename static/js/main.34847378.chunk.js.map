{"version":3,"sources":["upload_music.js","upload_lyrics.js","lyrics.js","player.js","download.js","edit.js","autofill.js","App.js","serviceWorker.js","index.js"],"names":["uploadMusic","handleMusicUpload","isPlaying","Button","style","margin","variant","color","component","disabled","type","accept","onChange","e","undefined","target","files","display","uploadLyrics","handleLyricUpload","file","reader","FileReader","Promise","resolve","reject","onload","event","result","onerror","error","readAsText","readFileContent","then","content","catch","console","log","Lyrics","lyrics","currentTime","setUpdateTime","lyricList","search","substr","split","id","className","map","line","i","arr","lineSeconds","parseInt","length","nextLineSeconds","Typography","document","getElementById","scrollIntoView","block","inline","onClick","Player","updateCurrentTime","audio","updateTime","setIsPlaying","useState","control","setControl","duration","setDuration","isLoaded","setIsLoaded","music","useEffect","src","URL","createObjectURL","onloadedmetadata","setInterval","Grid","container","spacing","alignItems","justify","item","Math","floor","Slider","width","min","max","value","newValue","IconButton","aria-label","paused","play","pause","Download","element","createElement","Blob","href","download","body","appendChild","click","marginTop","float","useStyles","makeStyles","theme","modal","justifyContent","paper","backgroundColor","palette","background","boxShadow","shadows","padding","Edit","classes","open","setOpen","textarea","setTextarea","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","marginLeft","popover","pointerEvents","height","Autofill","setLyrics","React","anchorEl","setAnchorEl","handlePopoverClose","Boolean","onMouseEnter","currentTarget","onMouseLeave","jsmediatags","require","songTitle","songArtist","read","onSuccess","tag","tags","title","artist","axios","get","encodeURIComponent","res","lyric","data","err","alert","onError","Popover","anchorOrigin","vertical","horizontal","transformOrigin","disableRestoreFocus","App","setAudio","setCurrentTime","createMuiTheme","primary","main","contrastText","ThemeProvider","time","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.34847378.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst uploadMusic = ({ handleMusicUpload, isPlaying }) => {\r\n  const onFileChange = (e) => {\r\n    if (e.target.files[0] !== undefined) {\r\n      handleMusicUpload(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <Button\r\n      style={{ margin: \"0 5px\" }}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      component=\"label\"\r\n      disabled={isPlaying}\r\n    >\r\n      Upload MP3/WAV\r\n      <input\r\n        type=\"file\"\r\n        accept=\".mp3,.wav\"\r\n        onChange={onFileChange}\r\n        style={{ display: \"none\" }}\r\n      />\r\n    </Button>\r\n  );\r\n};\r\nexport default uploadMusic;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst uploadLyrics = ({ handleLyricUpload, isPlaying }) => {\r\n  const readFileContent = (file) => {\r\n    const reader = new FileReader();\r\n    return new Promise((resolve, reject) => {\r\n      reader.onload = (event) => resolve(event.target.result);\r\n      reader.onerror = (error) => reject(error);\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n  const onFileChange = (e) => {\r\n    readFileContent(e.target.files[0])\r\n      .then((content) => {\r\n        handleLyricUpload(content);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <Button\r\n      style={{ margin: \"0 5px\" }}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      component=\"label\"\r\n      disabled={isPlaying}\r\n    >\r\n      Upload Lyric (LRC) file\r\n      <input\r\n        type=\"file\"\r\n        onChange={onFileChange}\r\n        accept=\".lrc, .txt\"\r\n        style={{ display: \"none\" }}\r\n      />\r\n    </Button>\r\n  );\r\n};\r\nexport default uploadLyrics;\r\n","import React from \"react\";\r\nimport \"./lyrics.css\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Lyrics = ({ lyrics, currentTime, setUpdateTime }) => {\r\n  var lyricList = \"\";\r\n  if (lyrics.search(/\\[[0-9]/) !== -1) {\r\n    lyricList = lyrics.substr(lyrics.search(/\\[[0-9]/)).split(\"\\n\");\r\n  } else {\r\n    lyricList = lyrics.split(\"\\r\\n\");\r\n  }\r\n  const handleLyricClick = (time) => {\r\n    setUpdateTime(time);\r\n  };\r\n  return (\r\n    <div id=\"lyrics-container\" className=\"lyrics-container\">\r\n      {lyricList.map((line, i, arr) => {\r\n        let lineSeconds =\r\n          parseInt(line.substr(1, 2)) * 60 + parseInt(line.substr(4, 2));\r\n        if (i + 1 !== arr.length) {\r\n          let nextLineSeconds =\r\n            parseInt(arr[i + 1].substr(1, 2)) * 60 +\r\n            parseInt(arr[i + 1].substr(4, 2));\r\n          if (lineSeconds <= currentTime && currentTime <= nextLineSeconds) {\r\n            return (\r\n              <Typography variant=\"body1\" id=\"highlight\" color=\"textPrimary\">\r\n                <b>{line.substr(10) + \"\\n\"}</b>\r\n              </Typography>\r\n            );\r\n          }\r\n        } else {\r\n          if (lineSeconds <= currentTime && currentTime <= lineSeconds + 10) {\r\n            return (\r\n              <Typography variant=\"body1\" id=\"highlight\" color=\"textPrimary\">\r\n                <b>{line.substr(10) + \"\\n\"}</b>\r\n              </Typography>\r\n            );\r\n          }\r\n        }\r\n        if (document.getElementById(\"highlight\") !== null) {\r\n          document.getElementById(\"highlight\").scrollIntoView({\r\n            block: \"center\",\r\n            inline: \"center\",\r\n          });\r\n        }\r\n        if (lyrics.search(/\\[[0-9]/) === -1) {\r\n          return (\r\n            <Typography variant=\"body1\" color=\"textSecondary\">\r\n              {line + \"\\n\"}\r\n            </Typography>\r\n          );\r\n        }\r\n        return (\r\n          <Typography\r\n            variant=\"body1\"\r\n            color=\"textSecondary\"\r\n            id={lineSeconds}\r\n            onClick={() => handleLyricClick(lineSeconds)}\r\n          >\r\n            {line.substr(10) + \"\\n\"}\r\n          </Typography>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default Lyrics;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\n\r\nimport \"./player.css\";\r\n\r\nconst Player = ({\r\n  currentTime,\r\n  updateCurrentTime,\r\n  audio,\r\n  updateTime,\r\n  setIsPlaying,\r\n}) => {\r\n  const [control, setControl] = useState(<PlayArrowIcon />);\r\n  const [duration, setDuration] = useState(0);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const music = document.getElementById(\"audio\");\r\n\r\n  useEffect(() => {\r\n    if (audio !== null) {\r\n      music.src = URL.createObjectURL(audio);\r\n      music.onloadedmetadata = function () {\r\n        setDuration(music.duration);\r\n      };\r\n      setIsLoaded(true);\r\n    }\r\n  }, [audio, music]);\r\n\r\n  useEffect(() => {\r\n    if (audio !== null) {\r\n      music.currentTime = updateTime;\r\n    }\r\n  }, [updateTime]);\r\n\r\n  const updateScrubber = () => {\r\n    updateCurrentTime(music.currentTime);\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    music.currentTime = newValue;\r\n  };\r\n\r\n  const handlePlayPause = () => {\r\n    if (music != null) {\r\n      if (music.paused === true) {\r\n        music.play();\r\n        setControl(<PauseIcon />);\r\n        setIsPlaying(true);\r\n      } else {\r\n        music.pause();\r\n        setControl(<PlayArrowIcon />);\r\n        setIsPlaying(false);\r\n      }\r\n    }\r\n  };\r\n  if (audio !== null) {\r\n    setInterval(updateScrubber, 500);\r\n  }\r\n  return (\r\n    <div className=\"player-container\">\r\n      <audio id=\"audio\" />\r\n      <Grid\r\n        className=\"scrubber-container\"\r\n        container\r\n        spacing={2}\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"subtitle2\" color=\"textPrimary\">\r\n            {Math.floor(currentTime / 60)}:\r\n            {Math.floor(currentTime % 60) < 10\r\n              ? \"0\" + Math.floor(currentTime % 60)\r\n              : Math.floor(currentTime % 60)}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Slider\r\n            style={{ width: 550 }}\r\n            min={0}\r\n            max={duration}\r\n            value={currentTime}\r\n            onChange={handleChange}\r\n            disabled={!isLoaded}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"subtitle2\" color=\"textPrimary\">\r\n            {Math.floor(duration / 60)}:\r\n            {Math.floor(duration % 60) < 10\r\n              ? \"0\" + Math.floor(duration % 60)\r\n              : Math.floor(duration % 60)}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <IconButton\r\n        aria-label=\"play/pause\"\r\n        onClick={handlePlayPause}\r\n        disabled={!isLoaded}\r\n      >\r\n        {control}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\nexport default Player;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Download = ({ lyrics }) => {\r\n  const handleClick = () => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([lyrics], { type: \"text/plain\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"lyrics.lrc\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={handleClick}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      style={{ marginTop: \"1rem\", float: \"right\" }}\r\n    >\r\n      Download LRC\r\n    </Button>\r\n  );\r\n};\r\nexport default Download;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Download from \"./download.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./edit.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst Edit = ({ lyrics, handleLyricUpload, isPlaying }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [textarea, setTextarea] = useState(lyrics);\r\n\r\n  useEffect(() => {\r\n    setTextarea(lyrics);\r\n  }, [lyrics]);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleChange = (e) => {\r\n    setTextarea(e.target.value);\r\n  };\r\n  const handleSave = () => {\r\n    handleLyricUpload(textarea);\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <div className=\"edit-container\">\r\n      <Button\r\n        style={{ margin: \"0 5px\" }}\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        onClick={handleOpen}\r\n        disabled={isPlaying}\r\n      >\r\n        Edit Lyrics\r\n      </Button>\r\n      <Modal\r\n        aria-labelledby=\"edit-modal-title\"\r\n        aria-describedby=\"edit-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <Typography variant=\"h4\" color=\"textPrimary\" id=\"edit-modal-title\">\r\n              Edit Lyrics\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" color=\"textPrimary\">\r\n              Type lyrics in the format:{\" \"}\r\n              <b>\r\n                [MM:SS.ss]<em>lyric here</em>\r\n              </b>\r\n            </Typography>\r\n            <textarea\r\n              className=\"lyrics-text\"\r\n              value={textarea}\r\n              onChange={handleChange}\r\n            />\r\n            <Button\r\n              className=\"save-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleSave}\r\n              style={{ marginTop: \"1rem\", marginLeft: \"1rem\", float: \"right\" }}\r\n            >\r\n              Save\r\n            </Button>\r\n            <Download lyrics={textarea} />\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport axios from \"axios\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  popover: {\r\n    pointerEvents: \"none\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    height: \"10em\",\r\n    width: \"15em\",\r\n  },\r\n}));\r\n\r\nconst Autofill = ({ audio, setLyrics, isPlaying }) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handlePopoverOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handlePopoverClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    var jsmediatags = require(\"jsmediatags\");\r\n    var songTitle = \"\";\r\n    var songArtist = \"\";\r\n    jsmediatags.read(audio, {\r\n      onSuccess: function (tag) {\r\n        songTitle = tag.tags.title;\r\n        songArtist = tag.tags.artist;\r\n        axios\r\n          .get(\r\n            `http://lyric-api.herokuapp.com/api/find/` +\r\n              encodeURIComponent(songArtist) +\r\n              \"/\" +\r\n              encodeURIComponent(songTitle)\r\n          )\r\n          .then((res) => {\r\n            const lyric = res.data.lyric;\r\n            const error = res.data.err;\r\n            if (error === \"none\") {\r\n              setLyrics(lyric);\r\n            } else {\r\n              alert(\"The lyrics for this song are not in the database!\");\r\n            }\r\n          });\r\n      },\r\n      onError: function (error) {\r\n        alert(\r\n          \"Could not retrieve file information, please upload lyrics or try another music file.\"\r\n        );\r\n      },\r\n    });\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <div style={{ display: \"inline\" }}>\r\n      <Button\r\n        style={{ margin: \"0 5px\" }}\r\n        onMouseEnter={handlePopoverOpen}\r\n        onMouseLeave={handlePopoverClose}\r\n        onClick={handleClick}\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        disabled={audio === null || isPlaying}\r\n      >\r\n        Autofill Lyrics\r\n      </Button>\r\n      <Popover\r\n        id=\"mouse-over-popover\"\r\n        open={open}\r\n        className={classes.popover}\r\n        classes={{\r\n          paper: classes.paper,\r\n        }}\r\n        anchorEl={anchorEl}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n        onClose={handlePopoverClose}\r\n        disableRestoreFocus\r\n      >\r\n        <p>\r\n          Attempt to auto-upload lyrics based on available information in the\r\n          currently uploaded music file. You will still have to use the \"Edit\r\n          Lyrics\" function to add timestamps to the lyrics!\r\n        </p>\r\n      </Popover>\r\n    </div>\r\n  );\r\n};\r\nexport default Autofill;\r\n","import React, { useState } from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport UploadMusic from \"./upload_music.js\";\nimport UploadLyrics from \"./upload_lyrics.js\";\nimport Lyrics from \"./lyrics.js\";\nimport Player from \"./player.js\";\nimport Edit from \"./edit.js\";\nimport Autofill from \"./autofill.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [audio, setAudio] = useState(null);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [lyrics, setLyrics] = useState(\n    \"[00:00.00]Upload music and lyrics to get started!\"\n  );\n  const [updateTime, setUpdateTime] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const handleMusicUpload = (file) => {\n    setAudio(file);\n  };\n  const handleLyricUpload = (file) => {\n    setLyrics(file);\n  };\n  const updateCurrentTime = (time) => {\n    setCurrentTime(time);\n  };\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: \"#18bc9c\",\n        contrastText: \"#fff\",\n      },\n      type: \"dark\",\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <UploadMusic\n          handleMusicUpload={handleMusicUpload}\n          isPlaying={isPlaying}\n        />\n        <Autofill audio={audio} setLyrics={setLyrics} isPlaying={isPlaying} />\n        <UploadLyrics\n          handleLyricUpload={handleLyricUpload}\n          isPlaying={isPlaying}\n        />\n        <Edit\n          lyrics={lyrics}\n          handleLyricUpload={handleLyricUpload}\n          isPlaying={isPlaying}\n        />\n        <Lyrics\n          lyrics={lyrics}\n          currentTime={currentTime}\n          setUpdateTime={setUpdateTime}\n        />\n        <Player\n          currentTime={currentTime}\n          updateCurrentTime={updateCurrentTime}\n          audio={audio}\n          updateTime={updateTime}\n          setIsPlaying={setIsPlaying}\n        />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"fontsource-roboto/latin.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}